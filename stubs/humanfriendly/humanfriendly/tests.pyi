from typing import Any

from humanfriendly.testing import TestCase as TestCase

class HumanFriendlyTestCase(TestCase):
    def test_case_insensitive_dict(self) -> None: ...
    def test_case_insensitive_key(self) -> None: ...
    def test_capture_output(self) -> None: ...
    def test_skip_on_raise(self) -> None: ...
    def test_retry_raise(self): ...
    def test_retry_return(self): ...
    def test_mocked_program(self) -> None: ...
    def test_temporary_directory(self) -> None: ...
    def test_touch(self) -> None: ...
    def test_patch_attribute(self) -> None: ...
    def test_patch_item(self) -> None: ...
    def test_run_cli_intercepts_exit(self): ...
    def test_run_cli_intercepts_error(self) -> None: ...
    def run_cli_raise_other(self) -> None: ...
    def test_run_cli_intercepts_output(self): ...
    def test_caching_decorator(self): ...
    def test_compact(self) -> None: ...
    def test_compact_empty_lines(self) -> None: ...
    def test_dedent(self) -> None: ...
    def test_pluralization(self) -> None: ...
    def test_generate_slug(self) -> None: ...
    def test_boolean_coercion(self) -> None: ...
    def test_pattern_coercion(self) -> None: ...
    def test_format_timespan(self) -> None: ...
    def test_parse_timespan(self) -> None: ...
    def test_parse_date(self) -> None: ...
    def test_format_size(self) -> None: ...
    def test_parse_size(self) -> None: ...
    def test_format_length(self) -> None: ...
    def test_parse_length(self) -> None: ...
    def test_format_number(self) -> None: ...
    def test_round_number(self) -> None: ...
    def test_format_path(self) -> None: ...
    def test_parse_path(self) -> None: ...
    def test_pretty_tables(self) -> None: ...
    def test_robust_tables(self) -> None: ...
    def test_smart_tables(self) -> None: ...
    def test_rst_tables(self) -> None: ...
    def test_concatenate(self) -> None: ...
    def test_split(self) -> None: ...
    def test_timer(self) -> None: ...
    def test_spinner(self) -> None: ...
    def test_automatic_spinner(self) -> None: ...
    def test_prompt_for_choice(self): ...
    def test_prompt_for_confirmation(self): ...
    def test_prompt_for_input(self) -> None: ...
    def test_cli(self) -> None: ...
    def test_ansi_style(self) -> None: ...
    def test_ansi_width(self) -> None: ...
    def test_ansi_wrap(self) -> None: ...
    def test_html_to_ansi(self): ...
    def test_generate_output(self) -> None: ...
    def test_generate_message(self) -> None: ...
    def test_generate_warning(self) -> None: ...
    def ignore_coverage_warning(self, stream): ...
    def test_clean_output(self) -> None: ...
    def test_find_terminal_size(self) -> None: ...
    def test_terminal_capabilities(self) -> None: ...
    def test_show_pager(self) -> None: ...
    def test_get_pager_command(self) -> None: ...
    def test_find_meta_variables(self) -> None: ...
    def test_parse_usage_simple(self) -> None: ...
    def test_parse_usage_tricky(self) -> None: ...
    def test_parse_usage_commas(self) -> None: ...
    def preprocess_parse_result(self, text): ...
    def test_format_usage(self) -> None: ...
    def test_render_usage(self) -> None: ...
    def test_deprecated_args(self): ...
    def test_alias_proxy_deprecation_warning(self) -> None: ...
    def test_alias_proxy_sphinx_compensation(self) -> None: ...
    def test_alias_proxy_sphinx_integration(self) -> None: ...
    callbacks: Any
    roles: Any
    def test_sphinx_customizations(self) -> None: ...
    def docstring_is_reformatted(self, entity): ...

def normalize_timestamp(value, ndigits: int = ...): ...
